// FrontEnd Plus GUI for JAD
// DeCompiled : KmeansTest.class

//package CGRexpack;
//import java.util.Arrays;
public class KmeansTest
{
	public static final long serialVersionUID = 0;
    /*
    algorithm calculation variaibles  */
	int JSmall=0, ISmall=0; // Current value of i and j is preserved in these variavles
	int len=0;//length of dataset
	boolean test=false;
	//additional array to define
	//Centroid :-local array
	double Centroid[], centroidnew[];

	boolean groupmatold[][], groupmat[][] ;  // global declaration
	int count[];
	boolean ret[][];

    /*....................................................................................*/

    int groupCount;
    int symbolCount;
    String property;
    int i;
    int j;
    char symbols[] = {
        'A', 'R', 'N', 'D', 'C', 'E', 'Q', 'G', 'H', 'I',
        'L', 'K', 'M', 'F', 'P', 'S', 'T', 'W', 'Y', 'V'
    };
    static String groups[] = {"A", "R", "N", "D", "C", "E", "Q", "G", "H", "I",
        "L", "K", "M", "F", "P", "S", "T", "W", "Y", "V"
    };//null;
    double prop[];
    String checker = null;

    //public native boolean[][] kmeansAlgthm(double ad[]);

    public KmeansTest(String s, int k)
    {
       
    	groupCount = 0;
        symbolCount = 20;
        property = new String();
        prop = new double[20];
        groupCount = k;
        property = s;
        groups = new String[groupCount];
     
        if(s.equals("Hydrophobicity"))        
        //if(s.equals("pI Values"))
        {
            /* double ad[] = {
                1.7999999523162842D, -4.5D, -3.51D, -3.52D, 2.5D, -3.56D, -3.57D, -0.40000000596046448D, -3.2000000476837158D, 4.5D,
                3.7999999523162842D, -3.9000000953674316D, 1.8999999761581421D, 2.7999999523162842D, -1.6000000238418579D, -0.80000001192092896D, -0.69999998807907104D, -0.89999997615814209D, -1.2999999523162842D, 4.1999998092651367D
           */
             double ad[] = {
                -0.495D, 
                0.496D, 
                0.527D, 
                0.100D, 
                0.780D, 
                0.232D, 
                0.151D, 
                0.119D, 
                0.238D, 
                -0.262D,
                0.374D, 
                0.695D, 
                0.721D, 
                -0.320D, 
                -0.229D, 
                -7.254D, 
                0.453D, 
                0.569D, 
                1.979D, 
                2.242D
         
            };
            prop = ad;
        } else
        if(s.equals("Molecular Weight"))
        {
            double ad1[] = {
                89.099998474121094D, 174.19999694824219D, 132.1199951171875D, 133.11000061035156D, 121.16000366210937D, 147.1300048828125D, 146.14999389648437D, 75.069999694824219D, 155.16000366210937D, 131.17999267578125D,
                131.17999267578125D, 146.19000244140625D, 149.21000671386719D, 165.19000244140625D, 115.12999725341797D, 105.08999633789062D, 119.12000274658203D, 204.22999572753906D, 181.19000244140625D, 117.15000152587891D
            };
            prop = ad1;
        } else
        
        if(s.equals("pI Values"))
        {
            double ad2[] = {
                6D, 10.760000228881836D, 5.4099998474121094D, 2.7699999809265137D, 5.070000171661377D, 3.2200000286102295D, 5.6500000953674316D, 5.9699997901916504D, 7.5900001525878906D, 6.0199999809265137D,
                5.9800000190734863D, 9.7399997711181641D, 5.7399997711181641D, 5.4800000190734863D, 6.3000001907348633D, 5.679999828338623D, 5.5999999046325684D, 5.8899998664855957D, 5.6599998474121094D, 5.9600000381469727D
            };
            prop = ad2;
        }
        else
        
        if(s.equals("Composition"))
        {
        	double ad3[] ={0,0.236363636363636,0.483636363636364,0.501818181818182,1,0.323636363636364,
			0.334545454545455,0.269090909090909,0.210909090909091,0,0,0.12,0,0,0.141818181818182,0.516363636363636,
			0.258181818181818,0.0472727272727273,0.0727272727272727,0};
        	
        	prop = ad3;
        	
        	}
        else
        
        if(s.equals("Residue volume"))
        {
        
        	double ad4[] ={0.169461077844311,0.725748502994012,0.389820359281437,0.304191616766467,
			0.31377245508982,0.531137724550898,0.482035928143713,0,0.554491017964072,0.649700598802395,0.649700598802395,
			0.692215568862275,0.611976047904192,0.772455089820359,0.372455089820359,0.17185628742515,0.348502994011976,
			1,0.796407185628743,0.487425149700599 };
        
        	prop = ad4;	}
        else
        
        if(s.equals("Polarity"))
        {
        	double ad5[] ={0.395061728395062,0.691358024691358,0.827160493827161,1,0.074074074074074,
			0.691358024691358,0.91358024691358,0.506172839506173,0.679012345679012,0.037037037037037,0,0.790123456790124,
			0.0987654320987654,0.037037037037037,0.382716049382716,0.530864197530864,0.45679012345679,0.0617283950617284,
			0.160493827160494,0.123456790123457};
        	prop = ad5;	
        	}
        	
        else
        if(s.equals("Partition energy"))
        {
        	double ad6[] ={0.550868486352357,1,0.645161290322581,0.719602977667494,0.173697270471464,
			0.761786600496278,0.732009925558313,0.607940446650124,0.401985111662531,0.245657568238213,0.233250620347395,
			0.873449131513648,0.13151364764268,0,0.707196029776675,0.655086848635236,0.543424317617866,0.399503722084367,
			0.47394540942928,0.210918114143921};
        	
        	prop = ad6;	
        }	
        else
        
        
        if(s.equals("Hydration number"))
        {
        	double ad7[] ={0.140625,0.34375,0.328125,1,0,0.3125,0.953125,0.15625,0.421875,
        	0.109375,0.109375,0.8125,0.09375,0.203125,0.125,0.25,0.21875,0.28125,0.3125,0.125};
        	prop = ad7;
        }	
        else
        
        if(s.equals("Hydrophilicity value"))
        {
        	double ad8[] ={0.453125,1,0.5625,1,0.375,0.5625,1,0.53125,0.453125,0.25,0.25,1,
        	0.328125,0.140625,0.53125,0.578125,0.46875,0,0.171875,0.296875};
        	prop = ad8;
        	
        }
       else
        
        if(s.equals("Heat capacity"))
        {
        	double ad9[] ={0.12080684060513,0.0583205437404078,0.319885989914492,
        	0.29335672001754,0.591756193817146,0.445297083972813,0.397500548125411,0,
        	0.787765840824381,0.4667836000877,0.5332163999123,0.732076299057224,1,
        	0.543959657969744,0.272308704231528,0.190528392896295,0.251918438938829,
        	0.728129796097347,0.614338960754221,0.364832273624205};
        	prop = ad9;
        	}
		else
        
        if(s.equals("Absolute entropy"))
        {
        	double ad10[] ={0.140535591668574,1,0.388189517051957,0.36438544289311,
        	0.665827420462348,0.500801098649576,0.463263904783703,0,0.944151979858091,
        	0.571526665140764,0.592355230029755,0.880521858548867,0.699931334401465,
        	0.602426184481575,0.331197070267796,0.249713893339437,0.269169146257725,
        	0.807049668116274,0.604486152437629,0.412222476539254};
        	prop = ad10;
        	}
		else
        
        if(s.equals("Entropy of formation"))
        {
        	double ad11[] ={0.12402045891793,1,0.37539298953592,0.314438552860025,
        	0.431185772605697,0.504950495049505,0.446999202289897,0,0.537938154004974,
        	0.494157946600347,0.489887851344376,0.80972267842898,0.350757824597626,
        	0.360564966449252,0.244146215569424,0.216601754962226,0.365538923560603,
        	0.511989113603303,0.475106752381399,0.373985265825161};
        	prop = ad11;
        	}
		else
        
        if(s.equals("Transfer free energy to surface"))
        {
        	double ad12[] ={0.862595419847328,0.893129770992366,0.969465648854962,
        	0.862595419847328,0.767175572519084,1,0.824427480916031,0.938931297709924,
        	0.893129770992366,0.0763358778625955,0,0.805343511450382,0.377862595419847,
        	0.049618320610687,0.564885496183206,0.790076335877863,0.740458015267175,
        	0.17175572519084,0.0839694656488549,0.343511450381679};
        	prop = ad12;
        	}
        else
        
        if(s.equals("Normalized relative frequency of bend"))
        {
        	double ad13[] ={0.335664335664336,0.531468531468532,0.881118881118881,0.839160839160839,0.20979020979021,0.335664335664336,0.468531468531469,1,0.370629370629371,0.06993006993007,0.188811188811189,0.496503496503497,0,0.258741258741259,0.874125874125874,0.622377622377622,0.552447552447553,0.307692307692308,0.587412587412587,0.0979020979020979};
        	prop = ad13;
        }
        else
        
        if(s.equals("Average accessible surface area"))
        {
        	double ad14[] ={0.140571428571429,0.905142857142857,0.509714285714286,
        	0.515428571428571,0,0.608,0.602285714285714,0.102857142857143,0.402285714285714,
        	0.0834285714285714,0.138285714285714,1,0.205714285714286,0.114285714285714,
        	0.411428571428571,0.302857142857143,0.337142857142857,0.219428571428571,
        	0.453714285714286,0.0937142857142857};
        	prop = ad14;
        }
        
        else
        
        if(s.equals("Percentage of buried residues"))
        {
        	double ad15[] ={0.676056338028169,0.028169014084507,0.267605633802817,
        	0.225352112676056,1,0.183098591549296,0.183098591549296,0.690140845070423,
        	0.436619718309859,0.887323943661972,0.802816901408451,0,0.690140845070423,
        	0.774647887323944,0.309859154929577,0.450704225352113,0.380281690140845,
        	0.647887323943662,0.295774647887324,0.859154929577465};
        	prop = ad15;
        }
        
        else
        
        if(s.equals("Percentage of exposed residues"))
        {
        	double ad16[] ={0.125,0.775,0.55,0.5625,0,0.6375,0.625,0.0625,
        	0.3625,0.1,0.1375,1,0.1875,0.0625,0.5,0.3375,0.3375,0.15,0.45,0.1125};
        	prop = ad16;
        }
        
        else
        
        if(s.equals("Ratio of buried and accessible molar fractions"))
        {
        	double ad17[] ={0.362637362637363,0.010989010989011,0.0769230769230769,
        	0.0769230769230769,1,0.0549450549450549,0.0549450549450549,0.384615384615385,
        	0.164835164835165,0.67032967032967,0.516483516483517,0,0.406593406593407,
        	0.472527472527473,0.120879120879121,0.164835164835165,0.142857142857143,
        	0.340659340659341,0.0989010989010989,0.626373626373626};
        	prop = ad17;
        }
        
        else
        
        if(s.equals("Transfer free energy"))
        {
        	double ad18[] ={0.777777777777778,0.148148148148148,0.481481481481481,
        	0.444444444444444,1,0.407407407407407,0.407407407407407,0.777777777777778,
        	0.62962962962963,0.925925925925926,0.851851851851852,0,0.814814814814815,
        	0.851851851851852,0.555555555555556,0.62962962962963,0.592592592592593,
        	0.777777777777778,0.518518518518518,0.888888888888889};    
        	prop = ad18;
        }
        else
        if(s.equals("Relative frequency of occurrence"))
        {
        	double ad19[] ={0.818181818181818,0.480519480519481,0.376623376623377,
        	0.493506493506494,0.0779220779220779,0.350649350649351,0.623376623376623,
        	0.779220779220779,0.116883116883117,0.506493506493506,1,0.584415584415584,
        	0.12987012987013,0.337662337662338,0.480519480519481,0.714285714285714,
        	0.584415584415584,0,0.233766233766234,0.675324675324675};           	
        	prop = ad19;
        }
        else
        if(s.equals("Relative mutability"))
        {
        	double ad20[] ={0.815217391304348,0.630434782608696,0.858695652173913,
        	0.66304347826087,0.206521739130435,0.641304347826087,0.565217391304348,
        	0.271739130434783,0.717391304347826,0.847826086956522,0.315217391304348,
        	0.510869565217391,0.739130434782609,0.282608695652174,0.358695652173913,
        	1,0.891304347826087,0,0.271739130434783,0.793478260869565}; 
        	prop = ad20;  
        }
        else
        if(s.equals("Amino acid distribution"))
        {
        	double ad21[] ={1,0.4,0.488888888888889,0.622222222222222,0.111111111111111,
        	0.355555555555556,0.555555555555556,0.888888888888889,0.133333333333333,
        	0.511111111111111,0.866666666666667,0.733333333333333,0.0666666666666667,
        	0.333333333333333,0.377777777777778,0.822222222222222,0.644444444444444,0,
        	0.333333333333333,0.755555555555556};
        	prop = ad21; 
        }
         else
        if(s.equals("Sequence frequency"))
        {
        	double ad22[] ={0.963815789473684,0.465460526315789,0.490131578947368,
        	0.495065789473684,0.233552631578947,0.351973684210526,0.539473684210526,
        	1,0.0921052631578947,0.485197368421053,0.792763157894737,0.782894736842105,
        	0.0542763157894737,0.335526315789474,0.439144736842105,0.8125,0.643092105263158,
        	0,0.317434210526316,0.746710526315789};
        	prop = ad22; 
        }
        else
        if(s.equals("Average relative probability of helix"))
        {
        	double ad23[] ={0.875,0.5,0.385416666666667,0.541666666666667,0.3125,
        	0.645833333333333,1,0.114583333333333,0.614583333333333,0.583333333333333,
        	0.71875,0.729166666666667,0.96875,0.552083333333333,0,0.229166666666667,
        	0.302083333333333,0.46875,0.28125,0.4375};        
        	prop = ad23; 
        }
        else
        if(s.equals("Average relative probability of beta-sheet"))
        {
        	double ad24[] ={0.247787610619469,0.283185840707965,0.079646017699115,
        	0.15929203539823,0.566371681415929,0.398230088495575,0,0.309734513274336,
        	0.345132743362832,0.84070796460177,0.628318584070796,0.212389380530973,
        	0.460176991150443,0.592920353982301,0.0707964601769911,0.345132743362832,
        	0.575221238938053,0.575221238938053,0.619469026548673,1};
        	prop = ad24; 
        }
        
        else
        if(s.equals("Average relative probability of inner helix"))
        {
        	double ad25[] ={0.765432098765432,0.580246913580247,0.265432098765432,
        	0.432098765432099,0.302469135802469,0.574074074074074,0.666666666666667,
        	0.197530864197531,0.567901234567901,0.62962962962963,0.833333333333333,
        	0.654320987654321,0.611111111111111,0,0.166666666666667,0.345679012345679,
        	0.592592592592593,0.327160493827161,0.549382716049383};
        	prop = ad25; 
        }
        
        else
        if(s.equals("Average relative probability of inner beta-sheet"))
        {
        	double ad26[] ={0.765432098765432,0.580246913580247,0.265432098765432,
        	0.432098765432099,0.302469135802469,0.574074074074074,0.666666666666667,
        	0.197530864197531,0.567901234567901,0.62962962962963,0.833333333333333,
        	0.654320987654321,0.611111111111111,0,0.166666666666667,0.345679012345679,
        	0.592592592592593,0.327160493827161,0.549382716049383};
        	prop = ad26; 
        }
        
        else
        if(s.equals("Flexibility parameter for no rigid neighbors"))
        {
        	double ad27[] ={0.475409836065573,0.463114754098361,0.786885245901639,
        	0.442622950819672,0.143442622950819,0.983606557377049,0.692622950819672,
        	0.889344262295081,0.233606557377049,0.315573770491803,0.172131147540983,
        	0.688524590163934,0.0901639344262291,0.0204918032786885,0.532786885245901,
        	1,0.60655737704918,0,0.147540983606557,0.233606557377049};
        	
        	prop = ad27; 
        }
        else
        if(s.equals("Flexibility parameter for one rigid neighbor"))
        {
        	double ad28[] ={0.370044052863436,0.731277533039648,0.634361233480176,
        	1,0.0704845814977974,0.71806167400881,0.766519823788547,0.792951541850221,
        	0.39647577092511,0.13215859030837,0.436123348017621,0.969162995594714,0,
        	0.220264317180617,0.982378854625551,0.819383259911895,0.832599118942731,
        	0.242290748898679,0.299559471365639,0.286343612334802};
        	
        	prop = ad28; 
        }
        else
        if(s.equals("Apparent partial specific volume"))
        {
        	double ad29[] ={0.468309859154929,0.598591549295775,0.133802816901408,
        	0,0.232394366197183,0.320422535211268,0.26056338028169,0.119718309859155,
        	0.309859154929577,0.883802816901409,1,0.735915492957747,0.53169014084507,
        	0.697183098591549,0.605633802816901,0.126760563380281,0.341549295774648,
        	0.651408450704225,0.651408450704225,0.77112676056338};
        	
        	prop = ad29; 
        }
        else
        if(s.equals("Alpha-NH chemical shifts"))
        {
        	double ad30[] ={0.9430661941237,0.945924316908654,1,0.961472504858809,
        	0.950268663541786,0.961586829770207,0.956670858580085,0.959300331542243,
        	0.9620441294158,0.936892648908197,0.962958728706985,0.961243855036012,
        	0.962387104149994,0.940665370984338,0,0.958042757516863,0.941579970275523,
        	0.92534583285698,0.935520749971419,0.964444952555162};
        	
        	prop = ad30; 
        }
         else
        if(s.equals("Flexibility parameter for two rigid neighbors"))
        {
        	double ad31[] ={0.350393700787402,0.385826771653543,0.5,0.507874015748032,
        	0.480314960629921,0.322834645669291,0.511811023622047,0.47244094488189,
        	0.358267716535433,0.271653543307087,0.464566929133858,1,0.00393700787401575,
        	0.437007874015748,0.507874015748032,0.47244094488189,0.515748031496063,0,
        	0.133858267716535,0.433070866141732};
        	
        	prop = ad31; 
        }
        else
        if(s.equals("The Kerr-constant increments"))
        {
        	double ad32[] ={0.385797950219619,1,0,0.0263543191800878,0.0263543191800878,
        	0.172767203513909,0.0263543191800878,0.499267935578331,0.580527086383602,
        	0.164714494875549,0.140556368960469,0.0263543191800878,0.0761346998535871,
        	0.426793557833089,0.346998535871157,0.351390922401171,0.253294289897511,
        	0.542459736456808,0.0263543191800878,0.242313323572474};
        	
        	prop = ad32; 
        }
        else
        if(s.equals("Net charge"))
        {
        	double ad33[] ={0.5,1,0.5,0,0.5,0.5,0,0.5,0.5,0.5,0.5,1,0.5,0.5,0.5,
        	0.5,0.5,0.5,0.5,0.5};
        	
        	prop = ad33; 
        }
        else
        if(s.equals("Side chain interaction parameter "))
        {
        	double ad34[] ={0.629213483146067,0.842696629213483,0.775280898876405,
        	0.752808988764045,0,0.797752808988764,0.741573033707865,0.966292134831461,
        	0.617977528089888,0.404494382022472,0.47752808988764,1,0.269662921348315,
        	0.471910112359551,0.898876404494382,0.702247191011236,0.651685393258427,
        	0.561797752808989,0.601123595505618,0.49438202247191};
        	prop = ad34; 
        }
        
        else
        if(s.equals("Fraction of site occupied by water"))
        {
        	double ad35[] ={0.392156862745098,0.509803921568627,0.450980392156863,0.490196078431373,
        	0.0588235294117647,0.607843137254902,0.568627450980392,0.392156862745098,
        	0.294117647058824,0.0784313725490196,0.156862745098039,1,0,0.0392156862745098,
        	0.745098039215686,0.372549019607843,0.352941176470588,0.137254901960784,
        	0.333333333333333,0.274509803921569};
        	prop = ad35; 
        }
        
        else
        if(s.equals("Side chain volume"))
        {
        	double ad36[] ={0.189003436426117,0.721649484536082,0.403436426116838,
        	0.274914089347079,0.306529209621993,0.554639175257732,0.426116838487972,
        	0,0.542955326460481,0.642611683848797,0.642611683848797,0.687285223367698,
        	0.646735395189003,0.793814432989691,0.287972508591065,0.201374570446735,
        	0.352577319587629,1,0.806185567010309,0.491408934707904};
        	 
        	prop = ad36; 
        }
        else
        if(s.equals("Hydropathy index"))
        {
        	double ad37[] ={0.7,0,0.111111111111111,0.111111111111111,0.777777777777778,
        	0.111111111111111,0.111111111111111,0.455555555555555,0.144444444444444,
        	1,0.922222222222222,0.0666666666666667,0.711111111111111,0.811111111111111,
        	0.322222222222222,0.411111111111111,0.422222222222222,0.4,0.355555555555556,
        	0.966666666666667};
        	prop = ad37;
         } 
         else
         if(s.equals("Transfer free energy, CHP/water"))
        {
        	double ad38[] ={0.13448275862069,0.279310344827586,0,0.0413793103448276,
        	0.189655172413793,0.189655172413793,0.0551724137931035,0.3,0.124137931034483,
        	0.579310344827586,0.651724137931035,0.268965517241379,0.579310344827586,
        	0.655172413793103,1,0.317241379310345,0.179310344827586,0.527586206896552,
        	0.727586206896552,0.493103448275862};
        	
        	prop = ad38;
         }   
         
         else
         if(s.equals("Distance between C-alpha and centroid of side chain"))
        {
        	double ad39[] ={0.206989247311828,1,0.532258064516129,0.53494623655914,0.370967741935484,
        	0.693548387096774,0.706989247311828,0,0.741935483870968,0.491935483870968,
        	0.559139784946237,0.790322580645161,0.629032258064516,0.798387096774194,
        	0.381720430107527,0.344086021505376,0.384408602150538,0.962365591397849,
        	0.903225806451613,0.400537634408602};
        	
        	prop = ad39;
         } 
         else
         if(s.equals("Side chain angle theta(AAR) "))
        {
        	double ad40[] ={0.999180327868853,0.995081967213115,0.963114754098361,0.99344262295082,
        	0.931967213114754,0.967213114754098,0.968852459016393,0,0.968852459016393,
        	0.974590163934426,0.968032786885246,1,0.927049180327869,0.968852459016393,
        	0.671311475409836,0.966393442622951,0.959836065573771,0.970491803278689,
        	0.901639344262295,0.997540983606557};        	
        	prop = ad40;
         }  
         
         else
         if(s.equals("Side chain torsion angle phi(AAAR)"))
        {
        	double ad41[] ={0.455938697318008,0.105363984674329,0.110153256704981,
        	0.185823754789272,0.132183908045977,0.0938697318007664,0.172413793103448,
        	1,0.232758620689655,0.21360153256705,0.0957854406130268,0.146551724137931,
        	0.0804597701149426,0.0775862068965517,0.400383141762452,0.348659003831418,
        	0.297892720306513,0.0775862068965517,0,0.236590038314176};
        	prop = ad41;
         } 
         else
         if(s.equals("Radius of gyration of side chain"))
        {
        	double ad42[] ={0.105555555555556,1,0.483333333333333,0.472222222222222,
        	0.355555555555556,0.65,0.661111111111111,0,0.666666666666667,
        	0.544444444444445,0.533333333333333,0.833333333333333,
        	0.677777777777778,0.733333333333333,0.372222222222222,
        	0.277777777777778,0.366666666666667,0.905555555555556,
        	0.861111111111111,0.394444444444444};
        	
        	prop = ad42;
         }
         else
         if(s.equals("van der Waals parameter R0"))
        {
        	double ad43[] ={0.294117647058824,0.529411764705882,0.235294117647059,
        	0.235294117647059,0.558823529411765,0.529411764705882,0.529411764705882,
        	0,0.529411764705882,0.823529411764706,0.823529411764706,0.529411764705882,
        	0.764705882352941,0.852941176470588,0.588235294117647,0.205882352941177,
        	0.235294117647059,1,0.852941176470588,0.647058823529412};
        	
        	prop = ad43;
         } 
         
         else
         if(s.equals("Normalized frequency of alpha-helix, with weights"))
        {
        	double ad44[] ={0.810526315789474,0.463157894736842,0.4,0.547368421052632,
        	0.621052631578947,0.789473684210526,0.968421052631579,0.0421052631578948,
        	0.736842105263158,0.473684210526316,0.821052631578947,0.747368421052631,
        	1,0.578947368421053,0,0.31578947368421,0.31578947368421,0.494736842105263,
        	0.210526315789474,0.410526315789474};
        	
        	prop = ad44;
         } 
         else
         if(s.equals("Normalized frequency of beta-sheet, with weights"))
        {
        	double ad45[] ={0.305882352941176,0.411764705882353,0.141176470588235,
        	0.0941176470588235,0.117647058823529,0.188235294117647,
        	0.129411764705882,0.329411764705882,0.517647058823529,
        	0.952941176470588,0.447058823529412,0.152941176470588,
        	0.388235294117647,0.8,0,0.364705882352941,0.670588235294118,
        	0.588235294117647,0.717647058823529,1};        	
        	prop = ad45;
         }
         else
         if(s.equals("Normalized frequency of reverse turn, with weights"))
        {
        	double ad46[] ={0.24,0.313333333333333,0.58,0.666666666666667,
        	0.266666666666667,0.38,0.386666666666667,0.82,0.18,0.0666666666666667,
        	0.113333333333333,0.366666666666667,0,0.12,1,0.606666666666667,0.42,
        	0.233333333333333,0.426666666666667,0.04}; 
        	prop = ad46;
         } 
         
         else
         if(s.equals("Normalized frequency of alpha-helix, unweighted"))
        {
        	double ad47[] ={0.86046511627907,0.465116279069767,0.430232558139535,
        	0.523255813953489,0.395348837209302,0.604651162790698,1,0.0348837209302326,
        	0.848837209302326,0.406976744186047,0.848837209302326,0.779069767441861,
        	0.941860465116279,0.511627906976744,0,0.209302325581395,0.244186046511628,
        	0.453488372093023,0.174418604651163,0.406976744186047}; 
        	
        	prop = ad47;
         } 
         
         else
         if(s.equals("Normalized frequency of beta-sheet, unweighted"))
        {
        	double ad48[] ={0.246913580246914,0.382716049382716,0.0864197530864197,
        	0.0370370370370369,0.469135802469136,0.419753086419753,0,0.283950617283951,
        	0.234567901234568,1,0.469135802469136,0.135802469135802,0.333333333333333,
        	0.679012345679012,0.0246913580246914,0.444444444444444,0.753086419753087,
        	0.740740740740741,0.802469135802469,0.950617283950617};
        	
        	prop = ad48;
         }
         else
         if(s.equals("Normalized frequency of reverse turn, unweighted"))
        {
        	double ad49[] ={0.25,0.333333333333333,0.598484848484849,0.765151515151515,
        	0.25,0.348484848484849,0.424242424242424,0.916666666666667,0.265151515151515,
        	0.0303030303030303,0.0833333333333333,0.401515151515152,0.0378787878787879,
        	0.234848484848485,1,0.636363636363636,0.386363636363636,0.25,0.356060606060606,
        	0}; 
        	       	
        	prop = ad49;
         } 
         else
         if(s.equals("Frequency of occurrence in beta-bends"))
        {
        	double ad50[] ={0.215384615384615,0.307692307692308,0.523076923076923,
        	1,0.184615384615385,0.276923076923077,0,0.769230769230769,0.0923076923076923,
        	0.215384615384615,0.169230769230769,0.292307692307692,0.461538461538461,0,
        	0.584615384615385,0.723076923076923,0.630769230769231,0.538461538461538,
        	0.584615384615385,0};
        	 
        	       	
        	prop = ad50;
         }
         else
         if(s.equals("Alpha-CH chemical shifts"))
        {
        	double ad51[] ={0.475409836065574,0.534678436317781,0.987389659520807,
        	1,0.900378310214376,0.505674653215637,0.407313997477932,0,0.829760403530896,
        	0.317780580075662,0.520807061790668,0.486759142496847,0.682219419924338,
        	0.871374527112233,0.629255989911728,0.663303909205549,0.471626733921816,
        	0.920554854981085,0.796973518284994,0.267339218158891};
        	 
        	       	
        	prop = ad51;
         }  
         else
         if(s.equals("Spin-spin coupling constants 3JHalpha-NH"))
        {
        	double ad52[] ={0.691489361702128,0.734042553191489,0.797872340425532,
        	0.74468085106383,0.819148936170213,0.638297872340426,0.74468085106383,
        	0.595744680851064,0.851063829787234,0.74468085106383,0.691489361702128,
        	0.691489361702128,0,1,0,0.691489361702128,0.734042553191489,0,
        	0.723404255319149,0.74468085106383};
        	        	         	       	
        	prop = ad52;
         }     
         
         else
         if(s.equals("Conformational preference for all beta-strands"))
        {
        	double ad53[] ={0.368794326241135,0.375886524822695,0.141843971631206,
        	0.0567375886524822,0.539007092198581,0.390070921985815,0.148936170212766,
        	0.148936170212766,0.375886524822695,1,0.638297872340425,0.212765957446808,
        	0.560283687943262,0.602836879432624,0,0.297872340425532,0.51063829787234,
        	0.808510638297872,0.801418439716312,1};
        	
        	        	         	       	
        	prop = ad53;
         }                                                                     
             
         else
         if(s.equals("Conformational preference for parallel beta-strand"))
        {
        	double ad54[] ={0.306382978723404,0.170212765957447,0.11063829787234,
        	0.0936170212765957,0.268085106382979,0,0.131914893617021,0.217021276595745,
        	0.0425531914893617,0.987234042553192,0.485106382978723,0.131914893617021,
        	0.514893617021277,0.434042553191489,0.0297872340425532,0.178723404255319,
        	0.131914893617021,0.259574468085106,0.340425531914894,1};
        	               	        	         	       	
        	prop = ad54;
         }
         else
         if(s.equals("Conformational preference for antiparallel beta-strands"))
        {
        	double ad55[] ={0.360902255639098,0.451127819548872,0.150375939849624,
        	0.037593984962406,0.616541353383459,0.571428571428571,0.150375939849624,
        	0.105263157894737,0.526315789473684,0.842105263157895,0.631578947368421,
        	0.240601503759398,0.503759398496241,0.609022556390977,0,0.338345864661654,
        	0.661654135338346,1,0.947368421052632,0.834586466165414};
        	        	               	        	         	       	
        	prop = ad55;
         } 
         else
         if(s.equals("Average surrounding hydrophobicity"))
        {
        	double ad56[] ={0.436213991769547,0.179012345679013,0.117283950617284,
        	0,0.777777777777778,0.187242798353909,0.213991769547325,0.325102880658436,
        	0.269547325102881,0.991769547325103,0.833333333333333,0.104938271604938,
        	0.728395061728395,0.648148148148148,0.106995884773662,0.0781893004115228,
        	0.172839506172839,0.633744855967078,0.52880658436214,1};
        	        	        	               	        	         	       	
        	prop = ad56;
         }
         
         else
         if(s.equals("Normalized frequency of alpha-helix"))
        {
        	double ad57[] ={0.801652892561983,0.59504132231405,0.148760330578512,
        	0.380165289256198,0.396694214876033,0.628099173553719,1,0,0.429752066115702,
        	0.479338842975207,0.743801652892562,0.669421487603306,0.884297520661157,
        	0.603305785123967,0.024793388429752,0.198347107438016,0.264462809917355,
        	0.454545454545455,0.190082644628099,0.429752066115702};
        	
        	        	        	               	        	         	       	
        	prop = ad57;
         }  
         else
         if(s.equals("Normalized frequency of extended structure"))
        {
        	double ad58[] ={0.338028169014084,0.450704225352113,0.169014084507042,
        	0.140845070422535,0.774647887323944,0.380281690140845,0,0.492957746478873,
        	0.619718309859155,0.873239436619718,0.507042253521127,0.23943661971831,
        	0.647887323943662,0.76056338028169,0.845070422535211,0.591549295774648,
        	0.788732394366197,0.633802816901408,0.887323943661972,1};
        	        	        	        	        	               	        	         	       	
        	prop = ad58;
         }  
         else
         if(s.equals("Normalized frequency of zeta R"))
        {
        	double ad59[] ={0.113475177304965,0.106382978723404,
        	1,0.567375886524823,0,0.170212765957447,0.24468085106383,
        	0.109929078014184,0.613475177304964,0.212765957446809,0.0177304964539007,
        	0.202127659574468,0.265957446808511,0.191489361702128,0.0638297872340425,
        	0.24468085106383,0.212765957446809,0.24113475177305,0.351063829787234,
        	0.195035460992908};
        	        	        	        	        	        	               	        	         	       	
        	prop = ad59;
         }
         else
         if(s.equals("Normalized frequency of left-handed alpha-helix"))
        {
        	double ad60[] ={0.0338645418326693,0.151394422310757,0.52191235059761,
        	0.215139442231076,0.189243027888446,0.181274900398406,0.0557768924302789,
        	1,0.113545816733068,0.051792828685259,0.0418326693227092,0.233067729083665,
        	0,0.0557768924302789,0.0239043824701195,0.113545816733068,0.0458167330677291,
        	0,0.193227091633466,0.047808764940239};
        	        	        	        	        	        	        	               	        	         	       	
        	prop = ad60;
         } 
         
          else
         if(s.equals("Normalized frequency of alpha region"))
        {
        	double ad61[] ={0.40251572327044,0.515723270440252,
        	0.320754716981132,0.647798742138365,0.459119496855346,
        	0.484276729559748,0.427672955974843,0.0628930817610063,0.220125786163522,
        	0.20125786163522,0.408805031446541,0.433962264150943,0,0.182389937106918,
        	1,0.754716981132076,0.547169811320755,0.465408805031447,0.320754716981132,
        	0.138364779874214};        	        	        	        	        	        	        	               	        	         	       	
        	prop = ad61;
         } 
         else
         if(s.equals("Refractivity"))
        {
        	double ad62[] ={0.102045614860099,0.626851634140607,0.312250176346109,
        	0.282153773806725,0.841053374088878,0.412885022337174,0.405831177992006,
        	0,0.512814483893722,0.448154244063014,0.441570656007524,0.500587820362097,
        	0.50881730543146,0.691276745826475,0.256995062308958,0.149306371972725,
        	0.25887608746767,1,0.741359040677169,0.327298377615801};        	        	        	        	        	        	        	               	        	         	       	
        	prop = ad62;
         } 
         else
         if(s.equals("Average reduced distance for C-alpha"))
        {
        	double ad63[] ={0.555555555555556,0.74074074074074,0.74074074074074,
        	0.851851851851852,0.37037037037037,0.888888888888889,0.888888888888889,
        	0.851851851851852,0.407407407407407,0.0370370370370371,0.259259259259259,
        	1,0.222222222222222,0,0.814814814814815,0.888888888888889,0.777777777777778,
        	0.185185185185185,0.555555555555556,0.111111111111111};  
        	
        	prop = ad63;
         }   
          else
         if(s.equals("Average reduced distance for side chain"))
        {
        	double ad64[] ={0.42,0.72,0.62,0.7,0.22,0.76,0.78,0.56,0.38,
        	0.0600000000000001,0.18,1,0.2,0,0.62,0.62,0.58,0.28,0.6,0.16};  
        	        	
        	prop = ad64;
         }
         else
         if(s.equals("Average side chain orientation angle"))
        {
        	double ad65[] ={0.511627906976744,0.372093023255814,0.116279069767442,
        	0.13953488372093,0.906976744186046,0.0232558139534884,0.162790697674419,
        	0.581395348837209,0.581395348837209,0.930232558139535,0.906976744186046,
        	0,0.813953488372093,1,0.302325581395349,0.418604651162791,0.418604651162791,
        	0.674418604651163,0.418604651162791,0.674418604651163};          	        	
        	
        	prop = ad65;
         }
         else
         if(s.equals("Effective partition energy"))
        {
        	double ad66[] ={0.359872611464968,0.219745222929936,0.14968152866242,
        	0.140127388535032,0.678343949044586,0.165605095541401,0.162420382165605,
        	0.264331210191083,0.375796178343949,0.936305732484076,0.859872611464968,
        	0,0.952229299363057,1,0.210191082802548,0.184713375796178,0.25796178343949,
        	0.82484076433121,0.535031847133758,0.719745222929936};          	        	
        	
        	
        	prop = ad66;
        	
         }
         else
         if(s.equals("Normalized frequency of alpha-helix"))
        {
        	double ad67[] ={0.725274725274725,0.21978021978022,0.153846153846154,0.406593406593407,
        	0.340659340659341,0.516483516483517,1,0.0989010989010989,0.725274725274725,
        	0.340659340659341,0.659340659340659,0.659340659340659,0.659340659340659,
        	0.659340659340659,0.0769230769230769,0.164835164835165,0.263736263736264,
        	0.472527472527473,0,0.373626373626374};          	        	
        	        	
        	prop = ad67;
        	
         }
         else
         if(s.equals("Normalized frequency of bata-structure"))
        {
        	double ad68[] ={0.520661157024793,0.28099173553719,0.322314049586777,
        	0.471074380165289,0.661157024793388,0.702479338842975,
        	0,0.471074380165289,0.446280991735537,1,0.768595041322314,
        	0.396694214876033,0.793388429752066,0.859504132231405,
        	0.347107438016529,0.363636363636364,0.743801652892562,0.661157024793388,
        	0.611570247933884,0.892561983471074};          	        	
        	        	
        	prop = ad68;
        	
         }
         else
         if(s.equals("Normalized frequency of coil"))
        {
        	double ad69[] ={0.164705882352941,0.882352941176471,0.941176470588235,
        	0.541176470588235,0.505882352941177,0.270588235294118,0.2,0.905882352941177,
        	0.211764705882353,0.258823529411765,0.0588235294117648,0.305882352941176,
        	0.0470588235294118,0,1,0.894117647058824,0.529411764705882,0.341176470588235,
        	0.905882352941177,0.294117647058824};          	        	
        	        	        	
        	prop = ad69;
        	
         }
         
          else
         if(s.equals("AA composition of total proteins"))
        {
        	double ad70[] ={0.850383631713555,0.578005115089514,0.382352941176471,
        	0.485933503836317,0.0601023017902813,0.337595907928389,0.608695652173913,
        	0.71227621483376,0.10613810741688,0.529411764705882,1,0.597186700767263,
        	0.148337595907928,0.318414322250639,0.461636828644501,0.703324808184143,
        	0.566496163682864,0,0.231457800511509,0.679028132992327}; 
              	
        	prop = ad70;
        	
         }
                              
         else
         if(s.equals("Normalized frequency of extended structure"))
        {
        	double ad71[] ={0.264264264264264,0.486486486486486,0.0870870870870871,
        	0.213213213213213,1,0.381381381381381,0.186186186186186,0.336336336336336,
        	0,0.633633633633633,0.600600600600601,0.195195195195195,0.525525525525525,
        	0.354354354354354,0.42042042042042,0.462462462462462,0.564564564564564,
        	0.0930930930930931,0.687687687687688,0.885885885885886}; 
        	
              	
        	prop = ad71;
        	
         }
          else
         if(s.equals("Steric parameter"))
        {
        	double ad72[] ={0.509803921568627,0.666666666666667,0.745098039215686,0.745098039215686,
        	0.607843137254902,0.666666666666667,0.666666666666667,0,0.686274509803921,
        	1,0.96078431372549,0.666666666666667,0.764705882352941,0.686274509803921,
        	0.352941176470588,0.519607843137255,0.490196078431373,0.686274509803921,
        	0.686274509803921,0.745098039215686}; 
        	
              	
        	prop = ad72;
        	
         }
            
          else
         if(s.equals("SD of AA composition of total proteins"))
        {
        	double ad73[] ={1,0.848837209302326,0.457364341085271,0.418604651162791,0.445736434108527,
        	0.468992248062015,0.717054263565891,0.856589147286822,0.155038759689923,
        	0.531007751937984,0.872093023255814,0.856589147286822,0.0852713178294574,
        	0.306201550387597,0.786821705426357,0.651162790697674,0.573643410852713,
        	0,0.236434108527132,0.534883720930233};         	
              	
        	prop = ad73;
        	
         } 
        
        else
         if(s.equals("AA composition of mt-proteins from fungi and plant"))
        {
        	double ad74[] ={0.384550084889643,0.16553480475382,0.547538200339558,
        	0.187606112054329,0,0.123089983022071,0.156196943972835,0.480475382003396,
        	0.116298811544992,0.770797962648557,1,0.323429541595925,0.239388794567063,
        	0.465195246179966,0.234295415959253,0.541595925297114,0.388794567062818,
        	0.066213921901528,0.387096774193548,0.451612903225806};         	
              	
        	prop = ad74;
        	
         } 
         
         else
         if(s.equals("AA composition of membrane proteins"))
        {
        	double ad74[] ={0.828774062816616,0.292806484295846,0.267477203647416,
        	0.285714285714286,0,0.212765957446808,0.377912867274569,0.753799392097264,
        	0.0820668693009118,0.547112462006079,1,0.246200607902736,0.209726443768997,
        	0.53596757852077,0.333333333333333,0.525835866261398,0.465045592705167,
        	0.116514690982776,0.223910840932118,0.656534954407295};         	
        	
              	
        	prop = ad74;
        	
         }
          else
         if(s.equals("Polarizability parameter"))
        {
        	double ad75[] ={0.112469437652812,0.711491442542787,0.327628361858191,
        	0.256723716381418,0.312958435207824,0.440097799511002,0.36919315403423,
        	0,0.562347188264059,0.454767726161369,0.454767726161369,0.535452322738386,
        	0.540342298288509,0.709046454767726,0.320293398533007,0.15158924205379,
        	0.264058679706601,1,0.728606356968215,0.342298288508558};         	
        	
              	
        	prop = ad75;
        	
         }
        
                                                   
        
        
        
        
        




	
        // A two dimensional boolean Array is returned back
	  //cluster

       boolean aflag[][] = kmeansAlgthm(prop,groupCount);
              
      				   
					   
        for(i = 0; i < groupCount; i++)
        {
            StringBuffer stringbuffer = new StringBuffer();
            for(j = 0; j < symbolCount; j++)
            {
            
                if(aflag[i][j])
                    stringbuffer.append(String.valueOf(symbols[j]));
                else
                {
                	//System.out.println("ERROR"+"\t aflag[i][j]"+aflag[i][j]);
                }
                    
             }       
            if(stringbuffer != null)
            {
            	groups[i] = new String(stringbuffer.toString());
    
            	
                if(stringbuffer.toString().trim().equals(""))
                {
                	//System.out.println("\n stringbuffer is not null but..."+ groups[i]);
                	groups[i] = new String(" ");
                }
                    
                else
                    groups[i] = new String(stringbuffer.toString());
            } else
            {
            	//System.out.println("\nstringbuffer is null groups[i]"+ groups[i]);
                groups[i] = new String(" ");
            }
            
        }
    }

    public static final String[] getDist()
    {

         
        for(int i=0;i<groups.length;++i)
        {
        //	System.out.println("length = \t"+groups.length);
       // System.out.println("i is \t"+i+"groups[i] \t"+groups[i]);
        //  System.out.println(groups[i]);
          }
	    return groups;
    }

    // function to implement the KmeanAlgorithm

    public boolean[][] kmeansAlgthm(double props[],int groupcount)
      {
		  // the algorithm has to be implemented in this function
         //transfer values
           // System.out.println(" The value of Group count :" + groupcount);
		 	Centroid =new double[groupcount];
		 	for(int i=0;i<groupcount;++i)
		 		{
		 			Centroid[i]=props[i];
		 	    }


		 	//find the length of the dataset
		 	 len=props.length;


		 	//Define a distance mattrix
		 	double distant[][]=new double[groupcount][len];


		 	//use a nested loop to initialise to zero
		 	for(int i=0;i<groupcount;++i)
		 		for(int j=0;j<len;++j)
		 			{
		 				distant[i][j]=0;
		 		    }


		    //............................................... first Phase ..........................................

		    //define group matrix old
		 	groupmatold=new boolean[groupcount][len];


		    //use nested loop to initialise to zero
		    for(int i=0;i<groupcount;++i)
		         for(int j=0;j<len;++j)
		         	{
		 				groupmatold[i][j]=false;
		 		    }
            //both initialisation is over

            // all object creations should be done outside
            groupmat=new boolean[groupcount][len];
             // array for new centriod

            count=new int[groupcount];
            centroidnew=new double[groupcount];
			for(int i=0;i<groupcount;++i)
		 			for(int j=0;j<len;++j)
		 				{
		 					groupmat[i][j]=false;
		 			    }

		     while (test==false)
		     {

                checker = "Alpha";
		 		//initialize group matrix
		 	/*	for(int i=0;i<groupcount;++i)
		 			for(int j=0;j<len;++j)
		 				{
		 					groupmat[i][j]=false;
		 			    }*/

                 // initialize centroid and count
		 	     for(int i=0;i<groupcount;++i)
		 	     {
		 			 centroidnew[i]=0;
		 			 count[i]=0;
		 	     }


		 		 for(int i=0;i<len;++i)
		 		 {
		 		 //can use the global variables
		 		 //prop to find the matrix value+1
		 		 //Arrays.sort(props);
		 		 double small=6000.00f;

		 		 for(int j=0;j<groupcount;++j)
		 		 	{
		 				distant[j][i]=Math.abs(Centroid[j]-props[i]);

		 				if(distant[j][i]<small)
		 				{
		 					small=distant[j][i];
		 					JSmall=j;
		 					ISmall=i;
		 			    }  // end of if

		 		    } //end of inner for loop

                   groupmat[JSmall][ISmall]=true;
                  // System.out.println( groupmat[JSmall][ISmall]);



                  // section to display the distant matrix
                 // System.out.println("\n ***** DISTANCE  MATRIX *****\n\n");

                /*  for(int indexi=0;indexi<groupcount;++indexi)
                     {
		               for(int indexj=0;indexj<len;++indexj)
		                 {
						  System.out.print("\t" +distant[indexi][indexj]);
					     }
					   System.out.println("\n");

				     }

                       System.out.println("\n\n ##### GroupMat Matrix #####\n");
		  				   for(int indexi=0;indexi<groupcount;++indexi)
		  				  		  {
		  				  		    for(int indexj=0;indexj<len;++indexj)
		  				  		 	 {
		  				  		 	   System.out.print("\t\t" +groupmat[indexi][indexj]);
		  				  		 	 }
		  				  		     System.out.println("\n");
		  		                  }*/


                 if(groupmatold==groupmat)
				 		 	      	{
				 		 				test=true;
				 		 				checker = "B E T A";
				 		 			//	System.out.println("\n COMPARE OK... EXITING \n");
				 		 				break;  // terminates out of the loop and returns
				 		 		    }


                  // code for implementing the delay
                 // System.out.println("\n _______________________________________________________ \n");
                  try
                   {
				     Thread.sleep(1000);
			       }
			      catch(Exception err)
			       {
					  System.out.println(err.getMessage());
			       }

		 		  for(int k=0;k<groupcount;++k)
		 		  	{
		 				if(groupmat[k][i]==true)
		 					{
		 						centroidnew[k]= centroidnew[k] +props[i];
		 						count[k] = count[k] +=1;
		 				    }
		 				  //  System.out.println(count[k]);
		 		    }  // end of for

		 	     }  // end of outer for loop



		  groupmatold = groupmat;



	    for(int m=0;m<groupcount;++m)
		  {
            // System.out.println(count[m]);
		     Centroid[m] = centroidnew[m]/count[m];

		  }
		// System.out.println("\n\n ++++++++++++ GroupMat Matrix+++++++++++++\n");
		 /* for(int i=0;i<groupcount;++i)
		  {
		    for(int j=0;j<len;++j)
		 	 {
		 	   System.out.print("\t\t" +groupmat[i][j]);
		 	 }
		     System.out.println("\n");
		  }*/

	   }  // end of while
		  // prepare the return section

		 // TRIAL DISPLAY OF ALL THE MATRIX
/*	System.out.println("\n\n _________ GroupMat Matrix ____________\n");
for(int i=0;i<groupcount;++i)
		  {
		    for(int j=0;j<len;++j)
		 	 {
		 	   System.out.print("\t\t" +groupmat[i][j]);
		 	 }
		     System.out.println("\n");
		  }
		 System.out.println("Checker Value " + checker);

		 System.out.println("\n ####### G R O U P M A T O L D     M A T R I X #######\n\n");
System.out.println("groupcount " + groupcount);
System.out.println("len " + len);
		 for(int i=0;i<groupcount;++i)
		  {
		    for(int j=0;j<len;++j)
		 	 {
		 	   System.out.print("\t\t" +groupmat[i][j]);
		 	 }
		     System.out.println("\n");
		  }
*/

		// System.out.println("Match Found and returned ");
         return(groupmat);
      }
/*public static void main(String args[])
{
	}*/
	
}

